export const projects = [
	{
		id: 1,
		title: "PRISM",
		description: `Plagiarism Recognition through Informed Statistical Modeling (PRISM) is a tool designed 
        to improve plagiarism detection of AI-generated code through a more advanced similarity detection system. 
        PRISM is a web-based application allowing professors access to a database of students' academic history.  
        PRISM aims to enhance the ability to catch academic dishonesty by extending the capabilities of the Measure 
        of Software Similarity (MOSS) tool to uncover AI-generated code alongside providing a greater in-depth 
        analysis of similarity scores through machine learning algorithms. With these capabilities, the main goal 
        of PRISM is to promote an increase in academic integrity and honesty among students.`,
		details: [
			"Data is ingested by professors uploading MOSS reports and/or fetching MOSS report data from the CodeGrade API.",
			"Programming assignment solutions are generated by AI, keyword analysis is used for detection for student and AI comparisons.",
			`Data analytics and reporting is done with python for cross-assignment and cross-course section analysis to track trends
            and detect plagiarism over time.`,
			`Frontend graphing utilizes D3.js to graph tabular reports and external data exports.`,
			`Tabular reports displays sortable plagiarism reports allowing professors to sort by similarity score, student, or section.`,
			`Professors filter and query data based on semester, courses, assignments, students using Django Rest Framework to simplify CRUD functionality.`,
			`Role based access implemented is implemented only permitting professors to view their own semesters, courses, assignments, and students.`,
			`Authentication integrated using Basic Authentication and Google OAuth with JWT tokens and HttpOnly cookies.`,
			"Github actions for CI/CD implementation.",
		],
		stack: [
			{
				id: 1,
				section: "Front-end",
				technologies: [
					"Next.js + Typescript",
					"Material UI",
					"D3.js",
					"NextAuth",
					"Jest",
				],
			},
			{
				id: 2,
				section: "Back-end",
				technologies: [
					"Django",
					"Django Rest Framework",
					"CodeGrade API",
					"DjangoSimpleJWT",
					"Django Rest-Auth",
					"Django All-Auth",
					"Matplotlib",
					"Pandas",
					"Numpy",
				],
			},
			{
				id: 3,
				section: "Database",
				technologies: ["PostgreSQL"],
			},
		],
		link: "https://github.com/stevenfojas670/2025-S-GROUP6-PRISM",
	},
	{
		id: 2,
		title: "Class Scraper",
		description: `A Python web scraper using Selenium that automates the downloading of videos and PDFs 
        from my class Canvas pages. It organizes the files into separate folders based on modules, allowing 
        me to continue studying even after the semester ends. The scraper supports multi-threading, enabling 
        users to scrape multiple classes simultaneously, given that all classes follow the same HTML structure.`,
		details: [
			"Built in an object oriented fashion using a base Browser class.",
			`Performs basic page traversal as well as network request request parsing to identify where canvas is downloading the content from
            so that our script can download the data from there as well.`,
			"Can be ran with multiple threads which will run multiple drivers to scrape multiple courses simultaneously.",
		],
		stack: [
			{
				id: 1,
				section: "Technologies",
				technologies: ["Python", "Selenium"],
			},
		],
		link: "https://github.com/stevenfojas670/Class-Scraper",
	},
	{
		id: 3,
		title: "Personal-Site",
		description: `This would be this website! I've developed this website as a portfolio to briefly show off some of my skills, past projects,
        work experience, and some of my career and life goals.`,
		details: [
			"Utilizing some modern frontend tech to enhance my skills.",
			"Implemented with a simple github actions to check linting using eslint and build status.",
		],
		stack: [
			{
				id: 1,
				section: "Technologies",
				technologies: [
					"React + Vite",
					"TailwindCSS",
					"Framer-Motion",
					"Shadcn",
				],
			},
		],
		link: "https://github.com/stevenfojas670/Personal-Site",
	},
	{
		id: 4,
		title: "Weather App",
		description: `This is simple weather app built using express.js and WeatherAPI. I've built this simply to
        work on my Javascript fundamentals before working on PRISM using React on the frontend.`,
		details: [
			"Simple app that displays a single card with a drop down to select a location.",
			"After selecting a location, a card displays the weather.",
			"Multiple location and weather data are displayed on a grid.",
		],
		stack: [
			{
				id: 1,
				section: "Frontend",
				technologies: ["Javascript", "HTML/CSS"],
			},
			{
				id: 2,
				section: "Backend",
				technologies: ["Expressjs", "WeatherAPI"],
			},
		],
		link: "https://github.com/stevenfojas670/JavaScript",
	},
]
